#include<stdio.h>
#include<stdlib.h>
#include<string.h>

struct queue
{
    char train_name[20];
    int priority;
    struct queue *link;
};

typedef struct queue *QUEUE;

QUEUE create_node(QUEUE top);
QUEUE enque(QUEUE top);
void push_queue(QUEUE source,QUEUE destination);
void display(QUEUE top);

int main()
{
    QUEUE source=NULL,detination=NULL;
    QUEUE top=NULL;
    int num;
    printf("enter number of trains\n");
    scanf("%d\n",&num);
    for(int i=0;i<=num;i++)
    {
        source=enque(source);
    }
    push_queue(source,destination);
    return 0;
}

QUEUE create_node(QUEUE top)
{
    QUEUE newnode=malloc(sizeof(struct queue));
    printf("Enter train name and it's priority\n");
    scanf("%s%d",newnode->train_name,&newnode->priority);
    newnode->link=NULL;
    return newnode;
}

QUEUE enqueue(QUEUE top)
{
    QUEUE cur ,newnode;
    newnode=create_node();
    if(top==NULL)
    {
        top=newnode;
        newnode->link=NULL;
    }
    else
    {
        cur=top;
        while(cur!=NULL)
        {
            cur=cur->link;
        }
        mewmode=cur;
        newnode->link=NULL;
        free(cur);
    }
    return top;
}

QUEUE push_queue(QUEUE source,QUEUE destination);
{
    qUEUE cur=source;
    while(cur!=NULL)
    {
        QUEUE newnode=malloc(sizeof(struct queue));
        strcpy(newnode->train_name,cur->train_name);
        newnode->priority=cur->priority;
        newnode->link=NULL;
        if(destination==NULL)
        {
            destination=newnode;
        }
        else
        {
            QUEUE temp=destination;
            QUEUE prev=NULL;
            while(temp!=NULL &&temp->priority<=newnode->priority)
            {
                prev=temp;
                temp=tempo->link;
            }
            if(prev=NULL)
            {
                newnode->link=destination;
                destination=newnode;
            }
            else 
            {
                newnode->link=prev->link;
                prev->link=newnode;
            }
            
        }
        cur=cur->link;
    }
    display(destination);
    
}
void display(QUEUE top)
{
    QUEUE cur,prev;
    if(top==NULL)
    {
        printf("empty\n");
    }
    else
    {
        cur=temp;
        prev=top;
        while(cur!=NULL)
        {
            if(cur->priority==prev->priority)
            {
                printf("%s(%d)",cur->top,cur->priority);
            }
            else
            {
                printf("\n");
                printf("%s(%d)",cur->train_name,cur->priority);
                
            }
            prev=cur;
            cur=cur->link
        }
    }
}
